import { NextRequest, NextResponse } from "next/server";
import { betaTestSchema } from "@/lib/schemas";

// In-memory storage for rate limiting (–≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Redis)
const ipRequests = new Map<string, { count: number; resetTime: number }>();

// Rate limiting: –º–∞–∫—Å–∏–º—É–º 5 –∑–∞–ø—Ä–æ—Å–æ–≤ –∑–∞ 10 –º–∏–Ω—É—Ç
const RATE_LIMIT = {
  maxRequests: 5,
  windowMs: 10 * 60 * 1000, // 10 –º–∏–Ω—É—Ç
};

function isRateLimited(ip: string): boolean {
  const now = Date.now();
  const requestData = ipRequests.get(ip);

  if (!requestData) {
    ipRequests.set(ip, { count: 1, resetTime: now + RATE_LIMIT.windowMs });
    return false;
  }

  if (now > requestData.resetTime) {
    ipRequests.set(ip, { count: 1, resetTime: now + RATE_LIMIT.windowMs });
    return false;
  }

  if (requestData.count >= RATE_LIMIT.maxRequests) {
    return true;
  }

  requestData.count++;
  return false;
}

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram
async function sendToTelegram(data: any) {
  const botToken = process.env.TELEGRAM_BOT_TOKEN;
  const chatId = process.env.TELEGRAM_CHAT_ID;
  
  if (!botToken || !chatId) {
    console.log("Telegram –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–æ–∫–µ–Ω –∏–ª–∏ chat_id");
    return false;
  }

  try {
    const message = `
üöÄ *–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –±–µ—Ç–∞-—Ç–µ—Å—Ç Nomadway*

üë§ *–ò–º—è:* ${data.name}
üì± *–ö–æ–Ω—Ç–∞–∫—Ç:* ${data.contact}
üéØ *–†–æ–ª—å:* ${data.role === "tourist" ? "–¢—É—Ä–∏—Å—Ç" : "–ö–æ–º–ø–∞–Ω–∏—è/–ì–∏–¥"}
üí¨ *–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:* ${data.comment || "–ù–µ —É–∫–∞–∑–∞–Ω"}
üåê *–ò—Å—Ç–æ—á–Ω–∏–∫:* ${data.source}
üìç *IP:* ${data.ip}
‚è∞ *–í—Ä–µ–º—è:* ${data.createdAt.toLocaleString("ru-RU")}
    `.trim();

    const response = await fetch(`https://api.telegram.org/bot${botToken}/sendMessage`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        chat_id: chatId,
        text: message,
        parse_mode: "Markdown",
      }),
    });

    if (response.ok) {
      console.log("‚úÖ –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ Telegram");
      return true;
    } else {
      console.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram:", await response.text());
      return false;
    }
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ Telegram API:", error);
    return false;
  }
}

export async function POST(request: NextRequest) {
  try {
    // Rate limiting
    const ip = request.ip || request.headers.get("x-forwarded-for") || "unknown";
    if (isRateLimited(ip)) {
      return NextResponse.json(
        { message: "–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ." },
        { status: 429 }
      );
    }

    const body = await request.json();
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    const validatedData = betaTestSchema.parse(body);
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    const userAgent = request.headers.get("user-agent") || "";
    const source = "landing-beta-test";
    
    const leadData = {
      ...validatedData,
      source,
      ip,
      userAgent,
      createdAt: new Date(),
    };

    // –õ–æ–≥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
    console.log("üìù New beta test lead:", leadData);

    // 1. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
    const telegramSent = await sendToTelegram(leadData);

    // 2. –ü—ã—Ç–∞–µ–º—Å—è —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    if (process.env.DATABASE_URL) {
      try {
        // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
        // –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
        console.log("üíæ Would save to database:", leadData);
      } catch (dbError) {
        console.error("‚ùå Database error:", dbError);
      }
    }

    // 3. –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å email (fallback)
    if (!telegramSent && process.env.RESEND_API_KEY && process.env.RESEND_TO) {
      try {
        const emailResponse = await fetch("https://api.resend.com/emails", {
          method: "POST",
          headers: {
            "Authorization": `Bearer ${process.env.RESEND_API_KEY}`,
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            from: "noreply@nomadway.app",
            to: process.env.RESEND_TO,
            subject: "–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –±–µ—Ç–∞-—Ç–µ—Å—Ç Nomadway",
            html: `
              <h2>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –±–µ—Ç–∞-—Ç–µ—Å—Ç</h2>
              <p><strong>–ò–º—è:</strong> ${leadData.name}</p>
              <p><strong>–ö–æ–Ω—Ç–∞–∫—Ç:</strong> ${leadData.contact}</p>
              <p><strong>–†–æ–ª—å:</strong> ${leadData.role === "tourist" ? "–¢—É—Ä–∏—Å—Ç" : "–ö–æ–º–ø–∞–Ω–∏—è/–ì–∏–¥"}</p>
              <p><strong>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</strong> ${leadData.comment || "–ù–µ —É–∫–∞–∑–∞–Ω"}</p>
              <p><strong>IP:</strong> ${leadData.ip}</p>
              <p><strong>–í—Ä–µ–º—è:</strong> ${leadData.createdAt.toLocaleString("ru-RU")}</p>
            `,
          }),
        });

        if (emailResponse.ok) {
          console.log("üìß Email sent successfully");
        } else {
          console.error("‚ùå Email sending failed:", await emailResponse.text());
        }
      } catch (emailError) {
        console.error("‚ùå Email error:", emailError);
      }
    }

    return NextResponse.json(
      { message: "–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!" },
      { status: 200 }
    );

  } catch (error) {
    console.error("‚ùå API error:", error);
    
    if (error instanceof Error && error.message.includes("validation")) {
      return NextResponse.json(
        { message: "–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã" },
        { status: 400 }
      );
    }

    return NextResponse.json(
      { message: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" },
      { status: 500 }
    );
  }
} 